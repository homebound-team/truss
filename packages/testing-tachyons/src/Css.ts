import { Properties as Properties1 } from "csstype";

// This file is auto-generated by truss: https://github.com/homebound-team/truss.
// See your project's `truss-config.ts` to make configuration changes (fonts, increments, etc).

/** Given a type X, and the user's proposed type T, only allow keys in X and nothing else. */
export type Only<X, T> = X & Record<Exclude<keyof T, keyof X>, never>;

export type Properties = Properties1<string | 0, string>;

export type Typography = "f24" | "f18" | "f16" | "f14" | "f12" | "f10";

type Opts<T> = { rules: T; enabled: boolean; important: boolean; selector: string | undefined };

class CssBuilder<T extends Properties> {
  constructor(private opts: Opts<T>) {}

  private get rules(): T {
    return this.opts.rules;
  }
  private get enabled(): boolean {
    return this.opts.enabled;
  }
  private get selector(): string | undefined {
    return this.opts.selector;
  }
  private newCss(opts: Partial<Opts<T>>): CssBuilder<T> {
    return new CssBuilder({ ...this.opts, ...opts });
  }

  // border
  /** Sets `borderStyle: "solid"; borderWidth: "1px"`. */
  get ba() {
    return this.add("borderStyle", "solid").add("borderWidth", "1px");
  }
  /** Sets `borderTopStyle: "solid"; borderTopWidth: "1px"`. */
  get bt() {
    return this.add("borderTopStyle", "solid").add("borderTopWidth", "1px");
  }
  /** Sets `borderRightStyle: "solid"; borderRightWidth: "1px"`. */
  get br() {
    return this.add("borderRightStyle", "solid").add("borderRightWidth", "1px");
  }
  /** Sets `borderBottomStyle: "solid"; borderBottomWidth: "1px"`. */
  get bb() {
    return this.add("borderBottomStyle", "solid").add("borderBottomWidth", "1px");
  }
  /** Sets `borderLeftStyle: "solid"; borderLeftWidth: "1px"`. */
  get bl() {
    return this.add("borderLeftStyle", "solid").add("borderLeftWidth", "1px");
  }
  /** Sets `borderStyle: "none"; borderWidth: "0"`. */
  get bn() {
    return this.add("borderStyle", "none").add("borderWidth", "0");
  }

  // borderColor
  /** Sets `borderColor: "#353535"`. */
  get bBlack() {
    return this.add("borderColor", "#353535");
  }
  /** Sets `borderColor: "#888888"`. */
  get bMidGray() {
    return this.add("borderColor", "#888888");
  }
  /** Sets `borderColor: "#cecece"`. */
  get bLightGray() {
    return this.add("borderColor", "#cecece");
  }
  /** Sets `borderColor: "#fcfcfa"`. */
  get bWhite() {
    return this.add("borderColor", "#fcfcfa");
  }
  /** Sets `borderColor: "#526675"`. */
  get bBlue() {
    return this.add("borderColor", "#526675");
  }
  /** Sets `borderColor: "var(--primary)"`. */
  get bPrimary() {
    return this.add("borderColor", "var(--primary)");
  }
  /** Sets `borderColor: value`. */
  bc(value: Properties["borderColor"]) {
    return this.add("borderColor", value);
  }

  // borderRadius
  /** Sets `borderRadius: "0"`. */
  get br0() {
    return this.add("borderRadius", "0");
  }
  /** Sets `borderRadius: ".125rem"`. */
  get br1() {
    return this.add("borderRadius", ".125rem");
  }
  /** Sets `borderRadius: ".25rem"`. */
  get br2() {
    return this.add("borderRadius", ".25rem");
  }
  /** Sets `borderRadius: ".5rem"`. */
  get br3() {
    return this.add("borderRadius", ".5rem");
  }
  /** Sets `borderRadius: "1rem"`. */
  get br4() {
    return this.add("borderRadius", "1rem");
  }
  /** Sets `borderRadius: "100%"`. */
  get br100() {
    return this.add("borderRadius", "100%");
  }
  /** Sets `borderRadius: "9999px"`. */
  get brPill() {
    return this.add("borderRadius", "9999px");
  }
  /** Sets `borderRadius: value`. */
  borderRadius(value: Properties["borderRadius"]) {
    return this.add("borderRadius", value);
  }

  // borderStyle
  /** Sets `borderStyle: "dashed"`. */
  get bsDashed() {
    return this.add("borderStyle", "dashed");
  }
  /** Sets `borderStyle: "dotted"`. */
  get bsDotted() {
    return this.add("borderStyle", "dotted");
  }
  /** Sets `borderStyle: "none"`. */
  get bsNone() {
    return this.add("borderStyle", "none");
  }
  /** Sets `borderStyle: "solid"`. */
  get bsSolid() {
    return this.add("borderStyle", "solid");
  }
  /** Sets `borderStyle: value`. */
  bs(value: Properties["borderStyle"]) {
    return this.add("borderStyle", value);
  }

  // borderWidth
  /** Sets `borderWidth: "1px"`. */
  get bw1() {
    return this.add("borderWidth", "1px");
  }
  /** Sets `borderWidth: "2px"`. */
  get bw2() {
    return this.add("borderWidth", "2px");
  }
  /** Sets `borderWidth: value`. */
  bw(value: Properties["borderWidth"]) {
    return this.add("borderWidth", value);
  }

  // boxShadow
  /** Sets `boxShadow: "none"`. */
  get shadowNone() {
    return this.add("boxShadow", "none");
  }

  // container
  /** Sets `containerType: "size"`. */
  get cts() {
    return this.add("containerType", "size");
  }
  /** Sets `containerType: "inline-size"`. */
  get ctis() {
    return this.add("containerType", "inline-size");
  }
  /** Sets `containerType: "normal"`. */
  get ctn() {
    return this.add("containerType", "normal");
  }
  /** Sets `containerType: value`. */
  ct(value: Properties["containerType"]) {
    return this.add("containerType", value);
  }
  /** Sets `containerName: value`. */
  cn(value: Properties["containerName"]) {
    return this.add("containerName", value);
  }

  // coordinates
  /** Sets `top: "0px"`. */
  get top0() {
    return this.add("top", "0px");
  }
  /** Sets `top: "8px"`. */
  get top1() {
    return this.add("top", "8px");
  }
  /** Sets `top: "16px"`. */
  get top2() {
    return this.add("top", "16px");
  }
  /** Sets `top: "24px"`. */
  get top3() {
    return this.add("top", "24px");
  }
  /** Sets `top: "32px"`. */
  get top4() {
    return this.add("top", "32px");
  }
  /** Sets `top: "v"`. */
  top(v: number | string) {
    return this.add("top", maybeInc(v));
  }
  /** Sets `top: px`. */
  topPx(px: number) {
    return this.add("top", `${px}px`);
  }
  /** Sets `right: "0px"`. */
  get right0() {
    return this.add("right", "0px");
  }
  /** Sets `right: "8px"`. */
  get right1() {
    return this.add("right", "8px");
  }
  /** Sets `right: "16px"`. */
  get right2() {
    return this.add("right", "16px");
  }
  /** Sets `right: "24px"`. */
  get right3() {
    return this.add("right", "24px");
  }
  /** Sets `right: "32px"`. */
  get right4() {
    return this.add("right", "32px");
  }
  /** Sets `right: "v"`. */
  right(v: number | string) {
    return this.add("right", maybeInc(v));
  }
  /** Sets `right: px`. */
  rightPx(px: number) {
    return this.add("right", `${px}px`);
  }
  /** Sets `bottom: "0px"`. */
  get bottom0() {
    return this.add("bottom", "0px");
  }
  /** Sets `bottom: "8px"`. */
  get bottom1() {
    return this.add("bottom", "8px");
  }
  /** Sets `bottom: "16px"`. */
  get bottom2() {
    return this.add("bottom", "16px");
  }
  /** Sets `bottom: "24px"`. */
  get bottom3() {
    return this.add("bottom", "24px");
  }
  /** Sets `bottom: "32px"`. */
  get bottom4() {
    return this.add("bottom", "32px");
  }
  /** Sets `bottom: "v"`. */
  bottom(v: number | string) {
    return this.add("bottom", maybeInc(v));
  }
  /** Sets `bottom: px`. */
  bottomPx(px: number) {
    return this.add("bottom", `${px}px`);
  }
  /** Sets `left: "0px"`. */
  get left0() {
    return this.add("left", "0px");
  }
  /** Sets `left: "8px"`. */
  get left1() {
    return this.add("left", "8px");
  }
  /** Sets `left: "16px"`. */
  get left2() {
    return this.add("left", "16px");
  }
  /** Sets `left: "24px"`. */
  get left3() {
    return this.add("left", "24px");
  }
  /** Sets `left: "32px"`. */
  get left4() {
    return this.add("left", "32px");
  }
  /** Sets `left: "v"`. */
  left(v: number | string) {
    return this.add("left", maybeInc(v));
  }
  /** Sets `left: px`. */
  leftPx(px: number) {
    return this.add("left", `${px}px`);
  }

  // cursor
  /** Sets `cursor: "pointer"`. */
  get cursorPointer() {
    return this.add("cursor", "pointer");
  }
  /** Sets `cursor: "not-allowed"`. */
  get cursorNotAllowed() {
    return this.add("cursor", "not-allowed");
  }
  /** Sets `cursor: value`. */
  cursor(value: Properties["cursor"]) {
    return this.add("cursor", value);
  }

  // display
  /** Sets `display: "none"`. */
  get dn() {
    return this.add("display", "none");
  }
  /** Sets `display: "block"`. */
  get db() {
    return this.add("display", "block");
  }
  /** Sets `display: "inline-block"`. */
  get dib() {
    return this.add("display", "inline-block");
  }
  /** Sets `display: "inline-table"`. */
  get dit() {
    return this.add("display", "inline-table");
  }
  /** Sets `display: "table"`. */
  get dt() {
    return this.add("display", "table");
  }
  /** Sets `display: "table-cell"`. */
  get dtc() {
    return this.add("display", "table-cell");
  }
  /** Sets `display: "table-row"`. */
  get dtRow() {
    return this.add("display", "table-row");
  }
  /** Sets `display: "table-column"`. */
  get dtColumn() {
    return this.add("display", "table-column");
  }
  /** Sets `display: "table-column-group"`. */
  get dtColumnGroup() {
    return this.add("display", "table-column-group");
  }
  /** Sets `display: "grid"`. */
  get dg() {
    return this.add("display", "grid");
  }
  /** Sets `display: "inline-grid"`. */
  get dig() {
    return this.add("display", "inline-grid");
  }
  /** Sets `display: "flex"`. */
  get df() {
    return this.add("display", "flex");
  }
  /** Sets `display: "inline-flex"`. */
  get dif() {
    return this.add("display", "inline-flex");
  }
  /** Sets `display: value`. */
  display(value: Properties["display"]) {
    return this.add("display", value);
  }

  // flexbox
  /** Sets `flex: "initial"`. */
  get fi() {
    return this.add("flex", "initial");
  }
  /** Sets `flex: "auto"`. */
  get fa() {
    return this.add("flex", "auto");
  }
  /** Sets `flex: "none"`. */
  get fn() {
    return this.add("flex", "none");
  }
  /** Sets `flex: "1"`. */
  get f1() {
    return this.add("flex", "1");
  }
  /** Sets `flex: "2"`. */
  get f2() {
    return this.add("flex", "2");
  }
  /** Sets `flex: "3"`. */
  get f3() {
    return this.add("flex", "3");
  }
  /** Sets `flex: "4"`. */
  get f4() {
    return this.add("flex", "4");
  }
  /** Sets `flex: "5"`. */
  get f5() {
    return this.add("flex", "5");
  }
  /** Sets `flex: value`. */
  f(value: Properties["flex"]) {
    return this.add("flex", value);
  }
  /** Sets `justifyContent: "flex-start"`. */
  get jcfs() {
    return this.add("justifyContent", "flex-start");
  }
  /** Sets `justifyContent: "flex-end"`. */
  get jcfe() {
    return this.add("justifyContent", "flex-end");
  }
  /** Sets `justifyContent: "center"`. */
  get jcc() {
    return this.add("justifyContent", "center");
  }
  /** Sets `justifyContent: "space-between"`. */
  get jcsb() {
    return this.add("justifyContent", "space-between");
  }
  /** Sets `justifyContent: "space-around"`. */
  get jcsa() {
    return this.add("justifyContent", "space-around");
  }
  /** Sets `justifyContent: "space-evenly"`. */
  get jcse() {
    return this.add("justifyContent", "space-evenly");
  }
  /** Sets `justifyContent: value`. */
  jc(value: Properties["justifyContent"]) {
    return this.add("justifyContent", value);
  }
  /** Sets `justifySelf: "auto"`. */
  get jsa() {
    return this.add("justifySelf", "auto");
  }
  /** Sets `justifySelf: "center"`. */
  get jsc() {
    return this.add("justifySelf", "center");
  }
  /** Sets `justifySelf: "start"`. */
  get jss() {
    return this.add("justifySelf", "start");
  }
  /** Sets `justifySelf: "end"`. */
  get jse() {
    return this.add("justifySelf", "end");
  }
  /** Sets `justifySelf: value`. */
  js(value: Properties["justifySelf"]) {
    return this.add("justifySelf", value);
  }
  /** Sets `justifyItems: "flex-start"`. */
  get jifs() {
    return this.add("justifyItems", "flex-start");
  }
  /** Sets `justifyItems: "flex-end"`. */
  get jife() {
    return this.add("justifyItems", "flex-end");
  }
  /** Sets `justifyItems: "center"`. */
  get jic() {
    return this.add("justifyItems", "center");
  }
  /** Sets `justifyItems: "space-between"`. */
  get jisb() {
    return this.add("justifyItems", "space-between");
  }
  /** Sets `justifyItems: "space-around"`. */
  get jisa() {
    return this.add("justifyItems", "space-around");
  }
  /** Sets `justifyItems: "space-evenly"`. */
  get jise() {
    return this.add("justifyItems", "space-evenly");
  }
  /** Sets `justifyItems: value`. */
  ji(value: Properties["justifyItems"]) {
    return this.add("justifyItems", value);
  }
  /** Sets `alignSelf: "flex-start"`. */
  get asfs() {
    return this.add("alignSelf", "flex-start");
  }
  /** Sets `alignSelf: "flex-end"`. */
  get asfe() {
    return this.add("alignSelf", "flex-end");
  }
  /** Sets `alignSelf: "center"`. */
  get asc() {
    return this.add("alignSelf", "center");
  }
  /** Sets `alignSelf: "baseline"`. */
  get asb() {
    return this.add("alignSelf", "baseline");
  }
  /** Sets `alignSelf: "stretch"`. */
  get asStretch() {
    return this.add("alignSelf", "stretch");
  }
  /** Sets `alignSelf: value`. */
  as(value: Properties["alignSelf"]) {
    return this.add("alignSelf", value);
  }
  /** Sets `alignItems: "flex-start"`. */
  get aifs() {
    return this.add("alignItems", "flex-start");
  }
  /** Sets `alignItems: "flex-end"`. */
  get aife() {
    return this.add("alignItems", "flex-end");
  }
  /** Sets `alignItems: "start"`. */
  get ais() {
    return this.add("alignItems", "start");
  }
  /** Sets `alignItems: "end"`. */
  get aie() {
    return this.add("alignItems", "end");
  }
  /** Sets `alignItems: "center"`. */
  get aic() {
    return this.add("alignItems", "center");
  }
  /** Sets `alignItems: "baseline"`. */
  get aib() {
    return this.add("alignItems", "baseline");
  }
  /** Sets `alignItems: "stretch"`. */
  get aiStretch() {
    return this.add("alignItems", "stretch");
  }
  /** Sets `alignItems: value`. */
  ai(value: Properties["alignItems"]) {
    return this.add("alignItems", value);
  }
  /** Sets `placeSelf: "auto"`. */
  get psa() {
    return this.add("placeSelf", "auto");
  }
  /** Sets `placeSelf: "center"`. */
  get psc() {
    return this.add("placeSelf", "center");
  }
  /** Sets `placeSelf: "start"`. */
  get pss() {
    return this.add("placeSelf", "start");
  }
  /** Sets `placeSelf: "end"`. */
  get pse() {
    return this.add("placeSelf", "end");
  }
  /** Sets `placeSelf: "flex-start"`. */
  get psfs() {
    return this.add("placeSelf", "flex-start");
  }
  /** Sets `placeSelf: "flex-end"`. */
  get psfe() {
    return this.add("placeSelf", "flex-end");
  }
  /** Sets `placeSelf: "stretch"`. */
  get psStretch() {
    return this.add("placeSelf", "stretch");
  }
  /** Sets `placeSelf: value`. */
  ps(value: Properties["placeSelf"]) {
    return this.add("placeSelf", value);
  }
  /** Sets `placeContent: "center"`. */
  get pcc() {
    return this.add("placeContent", "center");
  }
  /** Sets `placeContent: "start"`. */
  get pcs() {
    return this.add("placeContent", "start");
  }
  /** Sets `placeContent: "end"`. */
  get pce() {
    return this.add("placeContent", "end");
  }
  /** Sets `placeContent: "space-between"`. */
  get pcsb() {
    return this.add("placeContent", "space-between");
  }
  /** Sets `placeContent: "space-around"`. */
  get pcsa() {
    return this.add("placeContent", "space-around");
  }
  /** Sets `placeContent: "space-evenly"`. */
  get pcse() {
    return this.add("placeContent", "space-evenly");
  }
  /** Sets `placeContent: "baseline"`. */
  get pcb() {
    return this.add("placeContent", "baseline");
  }
  /** Sets `placeContent: "stretch"`. */
  get pcStretch() {
    return this.add("placeContent", "stretch");
  }
  /** Sets `placeContent: value`. */
  pc(value: Properties["placeContent"]) {
    return this.add("placeContent", value);
  }
  /** Sets `placeItems: "center"`. */
  get pic() {
    return this.add("placeItems", "center");
  }
  /** Sets `placeItems: "start"`. */
  get pis() {
    return this.add("placeItems", "start");
  }
  /** Sets `placeItems: "end"`. */
  get pie() {
    return this.add("placeItems", "end");
  }
  /** Sets `placeItems: "space-between"`. */
  get pisb() {
    return this.add("placeItems", "space-between");
  }
  /** Sets `placeItems: "space-around"`. */
  get pisa() {
    return this.add("placeItems", "space-around");
  }
  /** Sets `placeItems: "space-evenly"`. */
  get pise() {
    return this.add("placeItems", "space-evenly");
  }
  /** Sets `placeItems: "baseline"`. */
  get pib() {
    return this.add("placeItems", "baseline");
  }
  /** Sets `placeItems: "stretch"`. */
  get piStretch() {
    return this.add("placeItems", "stretch");
  }
  /** Sets `placeItems: value`. */
  pi(value: Properties["placeItems"]) {
    return this.add("placeItems", value);
  }
  /** Sets `flexBasis: "100%"`. */
  get fb1() {
    return this.add("flexBasis", "100%");
  }
  /** Sets `flexBasis: "50%"`. */
  get fb2() {
    return this.add("flexBasis", "50%");
  }
  /** Sets `flexBasis: "33.333333%"`. */
  get fb3() {
    return this.add("flexBasis", "33.333333%");
  }
  /** Sets `flexBasis: "25%"`. */
  get fb4() {
    return this.add("flexBasis", "25%");
  }
  /** Sets `flexBasis: "20%"`. */
  get fb5() {
    return this.add("flexBasis", "20%");
  }
  /** Sets `flexBasis: "16.666666%"`. */
  get fb6() {
    return this.add("flexBasis", "16.666666%");
  }
  /** Sets `flexBasis: "14.285714%"`. */
  get fb7() {
    return this.add("flexBasis", "14.285714%");
  }
  /** Sets `flexBasis: "12.5%"`. */
  get fb0() {
    return this.add("flexBasis", "12.5%");
  }
  /** Sets `flexBasis: value`. */
  fb(value: Properties["flexBasis"]) {
    return this.add("flexBasis", value);
  }
  /** Sets `flex: "auto"`. */
  get flexAuto() {
    return this.add("flex", "auto");
  }
  /** Sets `flex: "none"`. */
  get flexNone() {
    return this.add("flex", "none");
  }
  /** Sets `flex: value`. */
  flex(value: Properties["flex"]) {
    return this.add("flex", value);
  }
  /** Sets `flexGrow: 0`. */
  get fg0() {
    return this.add("flexGrow", 0);
  }
  /** Sets `flexGrow: 1`. */
  get fg1() {
    return this.add("flexGrow", 1);
  }
  /** Sets `flexGrow: value`. */
  flexGrow(value: Properties["flexGrow"]) {
    return this.add("flexGrow", value);
  }
  /** Sets `flexShrink: 0`. */
  get fs0() {
    return this.add("flexShrink", 0);
  }
  /** Sets `flexShrink: 1`. */
  get fs1() {
    return this.add("flexShrink", 1);
  }
  /** Sets `flexShrink: value`. */
  flexShrink(value: Properties["flexShrink"]) {
    return this.add("flexShrink", value);
  }
  /** Sets `flexDirection: "row"`. */
  get fdr() {
    return this.add("flexDirection", "row");
  }
  /** Sets `flexDirection: "row-reverse"`. */
  get fdrr() {
    return this.add("flexDirection", "row-reverse");
  }
  /** Sets `flexDirection: "column"`. */
  get fdc() {
    return this.add("flexDirection", "column");
  }
  /** Sets `flexDirection: "column-reverse"`. */
  get fdcr() {
    return this.add("flexDirection", "column-reverse");
  }
  /** Sets `flexDirection: value`. */
  fd(value: Properties["flexDirection"]) {
    return this.add("flexDirection", value);
  }
  /** Sets `flexWrap: "wrap"`. */
  get fww() {
    return this.add("flexWrap", "wrap");
  }
  /** Sets `flexWrap: "wrap-reverse"`. */
  get fwr() {
    return this.add("flexWrap", "wrap-reverse");
  }
  /** Sets `flexWrap: "nowrap"`. */
  get fwnw() {
    return this.add("flexWrap", "nowrap");
  }
  /** Sets `flexWrap: value`. */
  flexWrap(value: Properties["flexWrap"]) {
    return this.add("flexWrap", value);
  }
  /** Sets `order: value`. */
  order(value: Properties["order"]) {
    return this.add("order", value);
  }

  // float
  /** Sets `float: "left"`. */
  get fl() {
    return this.add("float", "left");
  }
  /** Sets `float: "right"`. */
  get fr() {
    return this.add("float", "right");
  }
  /** Sets `float: value`. */
  float(value: Properties["float"]) {
    return this.add("float", value);
  }

  // fontWeight
  /** Sets `fontWeight: "normal"`. */
  get normal() {
    return this.add("fontWeight", "normal");
  }
  /** Sets `fontWeight: "bold"`. */
  get b() {
    return this.add("fontWeight", "bold");
  }
  /** Sets `fontWeight: 100`. */
  get fw1() {
    return this.add("fontWeight", 100);
  }
  /** Sets `fontWeight: 200`. */
  get fw2() {
    return this.add("fontWeight", 200);
  }
  /** Sets `fontWeight: 300`. */
  get fw3() {
    return this.add("fontWeight", 300);
  }
  /** Sets `fontWeight: 400`. */
  get fw4() {
    return this.add("fontWeight", 400);
  }
  /** Sets `fontWeight: 500`. */
  get fw5() {
    return this.add("fontWeight", 500);
  }
  /** Sets `fontWeight: 600`. */
  get fw6() {
    return this.add("fontWeight", 600);
  }
  /** Sets `fontWeight: 700`. */
  get fw7() {
    return this.add("fontWeight", 700);
  }
  /** Sets `fontWeight: 800`. */
  get fw8() {
    return this.add("fontWeight", 800);
  }
  /** Sets `fontWeight: 900`. */
  get fw9() {
    return this.add("fontWeight", 900);
  }
  /** Sets `fontWeight: value`. */
  fw(value: Properties["fontWeight"]) {
    return this.add("fontWeight", value);
  }

  // grid
  /** Sets `gridTemplateColumns: value`. */
  gtc(value: Properties["gridTemplateColumns"]) {
    return this.add("gridTemplateColumns", value);
  }
  /** Sets `gridTemplateRows: value`. */
  gtr(value: Properties["gridTemplateRows"]) {
    return this.add("gridTemplateRows", value);
  }
  /** Sets `gridRow: value`. */
  gr(value: Properties["gridRow"]) {
    return this.add("gridRow", value);
  }
  /** Sets `gridColumn: value`. */
  gc(value: Properties["gridColumn"]) {
    return this.add("gridColumn", value);
  }
  /** Sets `gridAutoRows: value`. */
  gar(value: Properties["gridAutoRows"]) {
    return this.add("gridAutoRows", value);
  }
  /** Sets `gridAutoColumns: value`. */
  gac(value: Properties["gridAutoColumns"]) {
    return this.add("gridAutoColumns", value);
  }
  /** Sets `gap: "0px"`. */
  get gap0() {
    return this.add("gap", "0px");
  }
  /** Sets `gap: "8px"`. */
  get gap1() {
    return this.add("gap", "8px");
  }
  /** Sets `gap: "16px"`. */
  get gap2() {
    return this.add("gap", "16px");
  }
  /** Sets `gap: "24px"`. */
  get gap3() {
    return this.add("gap", "24px");
  }
  /** Sets `gap: "32px"`. */
  get gap4() {
    return this.add("gap", "32px");
  }
  /** Sets `gap: "v"`. */
  gap(v: number | string) {
    return this.add("gap", maybeInc(v));
  }
  /** Sets `gap: px`. */
  gapPx(px: number) {
    return this.add("gap", `${px}px`);
  }
  /** Sets `rowGap: "0px"`. */
  get rg0() {
    return this.add("rowGap", "0px");
  }
  /** Sets `rowGap: "8px"`. */
  get rg1() {
    return this.add("rowGap", "8px");
  }
  /** Sets `rowGap: "16px"`. */
  get rg2() {
    return this.add("rowGap", "16px");
  }
  /** Sets `rowGap: "24px"`. */
  get rg3() {
    return this.add("rowGap", "24px");
  }
  /** Sets `rowGap: "32px"`. */
  get rg4() {
    return this.add("rowGap", "32px");
  }
  /** Sets `rowGap: "v"`. */
  rg(v: number | string) {
    return this.add("rowGap", maybeInc(v));
  }
  /** Sets `rowGap: px`. */
  rgPx(px: number) {
    return this.add("rowGap", `${px}px`);
  }
  /** Sets `columnGap: "0px"`. */
  get cg0() {
    return this.add("columnGap", "0px");
  }
  /** Sets `columnGap: "8px"`. */
  get cg1() {
    return this.add("columnGap", "8px");
  }
  /** Sets `columnGap: "16px"`. */
  get cg2() {
    return this.add("columnGap", "16px");
  }
  /** Sets `columnGap: "24px"`. */
  get cg3() {
    return this.add("columnGap", "24px");
  }
  /** Sets `columnGap: "32px"`. */
  get cg4() {
    return this.add("columnGap", "32px");
  }
  /** Sets `columnGap: "v"`. */
  cg(v: number | string) {
    return this.add("columnGap", maybeInc(v));
  }
  /** Sets `columnGap: px`. */
  cgPx(px: number) {
    return this.add("columnGap", `${px}px`);
  }

  // height
  /** Sets `height: "0px"`. */
  get h0() {
    return this.add("height", "0px");
  }
  /** Sets `height: "8px"`. */
  get h1() {
    return this.add("height", "8px");
  }
  /** Sets `height: "16px"`. */
  get h2() {
    return this.add("height", "16px");
  }
  /** Sets `height: "24px"`. */
  get h3() {
    return this.add("height", "24px");
  }
  /** Sets `height: "32px"`. */
  get h4() {
    return this.add("height", "32px");
  }
  /** Sets `height: "auto"`. */
  get ha() {
    return this.add("height", "auto");
  }
  /** Sets `height: "v"`. */
  h(v: number | string) {
    return this.add("height", maybeInc(v));
  }
  /** Sets `height: px`. */
  hPx(px: number) {
    return this.add("height", `${px}px`);
  }
  /** Sets `height: "25%"`. */
  get h25() {
    return this.add("height", "25%");
  }
  /** Sets `height: "50%"`. */
  get h50() {
    return this.add("height", "50%");
  }
  /** Sets `height: "75%"`. */
  get h75() {
    return this.add("height", "75%");
  }
  /** Sets `height: "100%"`. */
  get h100() {
    return this.add("height", "100%");
  }
  /** Sets `height: "25vh"`. */
  get vh25() {
    return this.add("height", "25vh");
  }
  /** Sets `height: "50vh"`. */
  get vh50() {
    return this.add("height", "50vh");
  }
  /** Sets `height: "75vh"`. */
  get vh75() {
    return this.add("height", "75vh");
  }
  /** Sets `height: "100vh"`. */
  get vh100() {
    return this.add("height", "100vh");
  }
  /** Sets `height: "fit-content"`. */
  get hfc() {
    return this.add("height", "fit-content");
  }
  /** Sets `height: "max-content"`. */
  get hmaxc() {
    return this.add("height", "max-content");
  }
  /** Sets `height: "min-content"`. */
  get hminc() {
    return this.add("height", "min-content");
  }
  /** Sets `minHeight: 0`. */
  get mh0() {
    return this.add("minHeight", 0);
  }
  /** Sets `minHeight: "25%"`. */
  get mh25() {
    return this.add("minHeight", "25%");
  }
  /** Sets `minHeight: "50%"`. */
  get mh50() {
    return this.add("minHeight", "50%");
  }
  /** Sets `minHeight: "75%"`. */
  get mh75() {
    return this.add("minHeight", "75%");
  }
  /** Sets `minHeight: "100%"`. */
  get mh100() {
    return this.add("minHeight", "100%");
  }
  /** Sets `minHeight: "100vh"`. */
  get mvh100() {
    return this.add("minHeight", "100vh");
  }
  /** Sets `minHeight: value`. */
  mh(value: Properties["minHeight"]) {
    return this.add("minHeight", value);
  }
  /** Sets `minHeight: px`. */
  mhPx(px: number) {
    return this.mh(`${px}px`);
  }
  /** Sets `maxHeight: "0"`. */
  get maxh0() {
    return this.add("maxHeight", "0");
  }
  /** Sets `maxHeight: "25%"`. */
  get maxh25() {
    return this.add("maxHeight", "25%");
  }
  /** Sets `maxHeight: "50%"`. */
  get maxh50() {
    return this.add("maxHeight", "50%");
  }
  /** Sets `maxHeight: "75%"`. */
  get maxh75() {
    return this.add("maxHeight", "75%");
  }
  /** Sets `maxHeight: "100%"`. */
  get maxh100() {
    return this.add("maxHeight", "100%");
  }
  /** Sets `maxHeight: value`. */
  maxh(value: Properties["maxHeight"]) {
    return this.add("maxHeight", value);
  }
  /** Sets `maxHeight: px`. */
  maxhPx(px: number) {
    return this.maxh(`${px}px`);
  }
  /** Sets `height: px; width: px`. */

  sqPx(px: number) {
    return this.add("height", `${px}px`).add("width", `${px}px`);
  }

  // lineClamp
  /** Sets `overflow: "hidden"; display: "-webkit-box"; WebkitLineClamp: 1; WebkitBoxOrient: "vertical"; textOverflow: "ellipsis"`. */
  get lineClamp1() {
    return this.add("overflow", "hidden").add("display", "-webkit-box").add("WebkitLineClamp", 1).add(
      "WebkitBoxOrient",
      "vertical",
    ).add("textOverflow", "ellipsis");
  }
  /** Sets `overflow: "hidden"; display: "-webkit-box"; WebkitLineClamp: 2; WebkitBoxOrient: "vertical"; textOverflow: "ellipsis"`. */
  get lineClamp2() {
    return this.add("overflow", "hidden").add("display", "-webkit-box").add("WebkitLineClamp", 2).add(
      "WebkitBoxOrient",
      "vertical",
    ).add("textOverflow", "ellipsis");
  }
  /** Sets `overflow: "hidden"; display: "-webkit-box"; WebkitLineClamp: 3; WebkitBoxOrient: "vertical"; textOverflow: "ellipsis"`. */
  get lineClamp3() {
    return this.add("overflow", "hidden").add("display", "-webkit-box").add("WebkitLineClamp", 3).add(
      "WebkitBoxOrient",
      "vertical",
    ).add("textOverflow", "ellipsis");
  }
  /** Sets `overflow: "hidden"; display: "-webkit-box"; WebkitLineClamp: 4; WebkitBoxOrient: "vertical"; textOverflow: "ellipsis"`. */
  get lineClamp4() {
    return this.add("overflow", "hidden").add("display", "-webkit-box").add("WebkitLineClamp", 4).add(
      "WebkitBoxOrient",
      "vertical",
    ).add("textOverflow", "ellipsis");
  }
  /** Sets `overflow: "hidden"; display: "-webkit-box"; WebkitLineClamp: 5; WebkitBoxOrient: "vertical"; textOverflow: "ellipsis"`. */
  get lineClamp5() {
    return this.add("overflow", "hidden").add("display", "-webkit-box").add("WebkitLineClamp", 5).add(
      "WebkitBoxOrient",
      "vertical",
    ).add("textOverflow", "ellipsis");
  }
  /** Sets `overflow: "hidden"; display: "-webkit-box"; WebkitLineClamp: 6; WebkitBoxOrient: "vertical"; textOverflow: "ellipsis"`. */
  get lineClamp6() {
    return this.add("overflow", "hidden").add("display", "-webkit-box").add("WebkitLineClamp", 6).add(
      "WebkitBoxOrient",
      "vertical",
    ).add("textOverflow", "ellipsis");
  }
  /** Sets `WebkitLineClamp: "unset"`. */
  get lineClampNone() {
    return this.add("WebkitLineClamp", "unset");
  }

  // objectFit
  /** Sets `objectFit: "contain"`. */
  get objectContain() {
    return this.add("objectFit", "contain");
  }
  /** Sets `objectFit: "cover"`. */
  get objectCover() {
    return this.add("objectFit", "cover");
  }
  /** Sets `objectFit: "fill"`. */
  get objectFill() {
    return this.add("objectFit", "fill");
  }
  /** Sets `objectFit: "none"`. */
  get objectNone() {
    return this.add("objectFit", "none");
  }
  /** Sets `objectFit: "scale-down"`. */
  get objectScaleDown() {
    return this.add("objectFit", "scale-down");
  }
  /** Sets `objectFit: value`. */
  objectFit(value: Properties["objectFit"]) {
    return this.add("objectFit", value);
  }

  // opacity
  /** Sets `opacity: "0"`. */
  get o0() {
    return this.add("opacity", "0");
  }
  /** Sets `opacity: "0.25"`. */
  get o25() {
    return this.add("opacity", "0.25");
  }
  /** Sets `opacity: "0.5"`. */
  get o50() {
    return this.add("opacity", "0.5");
  }
  /** Sets `opacity: "0.75"`. */
  get o75() {
    return this.add("opacity", "0.75");
  }
  /** Sets `opacity: "1"`. */
  get o100() {
    return this.add("opacity", "1");
  }
  /** Sets `opacity: value`. */
  o(value: Properties["opacity"]) {
    return this.add("opacity", value);
  }

  // outline
  /** Sets `outline: "1px solid"`. */
  get outline1() {
    return this.add("outline", "1px solid");
  }
  /** Sets `outline: "1px solid transparent"`. */
  get outlineTransparent() {
    return this.add("outline", "1px solid transparent");
  }
  /** Sets `outline: "0"`. */
  get outline0() {
    return this.add("outline", "0");
  }
  /** Sets `outline: value`. */
  outline(value: Properties["outline"]) {
    return this.add("outline", value);
  }

  // overflow
  /** Sets `overflow: "visible"`. */
  get overflowVisible() {
    return this.add("overflow", "visible");
  }
  /** Sets `overflow: "hidden"`. */
  get overflowHidden() {
    return this.add("overflow", "hidden");
  }
  /** Sets `overflow: "scroll"`. */
  get overflowScroll() {
    return this.add("overflow", "scroll");
  }
  /** Sets `overflow: "auto"`. */
  get overflowAuto() {
    return this.add("overflow", "auto");
  }
  /** Sets `overflow: value`. */
  overflow(value: Properties["overflow"]) {
    return this.add("overflow", value);
  }
  /** Sets `overflowY: "visible"`. */
  get overflowYVisible() {
    return this.add("overflowY", "visible");
  }
  /** Sets `overflowY: "hidden"`. */
  get overflowYHidden() {
    return this.add("overflowY", "hidden");
  }
  /** Sets `overflowY: "scroll"`. */
  get overflowYScroll() {
    return this.add("overflowY", "scroll");
  }
  /** Sets `overflowY: "auto"`. */
  get overflowYAuto() {
    return this.add("overflowY", "auto");
  }
  /** Sets `overflowY: value`. */
  overflowY(value: Properties["overflowY"]) {
    return this.add("overflowY", value);
  }
  /** Sets `overflowX: "visible"`. */
  get overflowXVisible() {
    return this.add("overflowX", "visible");
  }
  /** Sets `overflowX: "hidden"`. */
  get overflowXHidden() {
    return this.add("overflowX", "hidden");
  }
  /** Sets `overflowX: "scroll"`. */
  get overflowXScroll() {
    return this.add("overflowX", "scroll");
  }
  /** Sets `overflowX: "auto"`. */
  get overflowXAuto() {
    return this.add("overflowX", "auto");
  }
  /** Sets `overflowX: value`. */
  overflowX(value: Properties["overflowX"]) {
    return this.add("overflowX", value);
  }

  // position
  /** Sets `position: "absolute"`. */
  get absolute() {
    return this.add("position", "absolute");
  }
  /** Sets `position: "fixed"`. */
  get fixed() {
    return this.add("position", "fixed");
  }
  /** Sets `position: "static"`. */
  get static() {
    return this.add("position", "static");
  }
  /** Sets `position: "relative"`. */
  get relative() {
    return this.add("position", "relative");
  }
  /** Sets `position: "sticky"`. */
  get sticky() {
    return this.add("position", "sticky");
  }
  /** Sets `position: value`. */
  position(value: Properties["position"]) {
    return this.add("position", value);
  }

  // skins
  /** Sets `color: "#353535"`. */
  get black() {
    return this.add("color", "#353535");
  }
  /** Sets `color: "#888888"`. */
  get midGray() {
    return this.add("color", "#888888");
  }
  /** Sets `color: "#cecece"`. */
  get lightGray() {
    return this.add("color", "#cecece");
  }
  /** Sets `color: "#fcfcfa"`. */
  get white() {
    return this.add("color", "#fcfcfa");
  }
  /** Sets `color: "#526675"`. */
  get blue() {
    return this.add("color", "#526675");
  }
  /** Sets `color: "var(--primary)"`. */
  get primary() {
    return this.add("color", "var(--primary)");
  }
  /** Sets `color: value`. */
  color(value: Properties["color"]) {
    return this.add("color", value);
  }
  /** Sets `backgroundColor: "#353535"`. */
  get bgBlack() {
    return this.add("backgroundColor", "#353535");
  }
  /** Sets `backgroundColor: "#888888"`. */
  get bgMidGray() {
    return this.add("backgroundColor", "#888888");
  }
  /** Sets `backgroundColor: "#cecece"`. */
  get bgLightGray() {
    return this.add("backgroundColor", "#cecece");
  }
  /** Sets `backgroundColor: "#fcfcfa"`. */
  get bgWhite() {
    return this.add("backgroundColor", "#fcfcfa");
  }
  /** Sets `backgroundColor: "#526675"`. */
  get bgBlue() {
    return this.add("backgroundColor", "#526675");
  }
  /** Sets `backgroundColor: "var(--primary)"`. */
  get bgPrimary() {
    return this.add("backgroundColor", "var(--primary)");
  }
  /** Sets `backgroundColor: value`. */
  bgColor(value: Properties["backgroundColor"]) {
    return this.add("backgroundColor", value);
  }
  /** Sets `fill: "#353535"`. */
  get fBlack() {
    return this.add("fill", "#353535");
  }
  /** Sets `fill: "#888888"`. */
  get fMidGray() {
    return this.add("fill", "#888888");
  }
  /** Sets `fill: "#cecece"`. */
  get fLightGray() {
    return this.add("fill", "#cecece");
  }
  /** Sets `fill: "#fcfcfa"`. */
  get fWhite() {
    return this.add("fill", "#fcfcfa");
  }
  /** Sets `fill: "#526675"`. */
  get fBlue() {
    return this.add("fill", "#526675");
  }
  /** Sets `fill: "var(--primary)"`. */
  get fPrimary() {
    return this.add("fill", "var(--primary)");
  }
  /** Sets `fill: value`. */
  fill(value: Properties["fill"]) {
    return this.add("fill", value);
  }

  // spacing
  /** Sets `marginTop: "0px"`. */
  get mt0() {
    return this.add("marginTop", "0px");
  }
  /** Sets `marginTop: "8px"`. */
  get mt1() {
    return this.add("marginTop", "8px");
  }
  /** Sets `marginTop: "16px"`. */
  get mt2() {
    return this.add("marginTop", "16px");
  }
  /** Sets `marginTop: "24px"`. */
  get mt3() {
    return this.add("marginTop", "24px");
  }
  /** Sets `marginTop: "32px"`. */
  get mt4() {
    return this.add("marginTop", "32px");
  }
  /** Sets `marginTop: "auto"`. */
  get mta() {
    return this.add("marginTop", "auto");
  }
  /** Sets `marginTop: "v"`. */
  mt(v: number | string) {
    return this.add("marginTop", maybeInc(v));
  }
  /** Sets `marginTop: px`. */
  mtPx(px: number) {
    return this.add("marginTop", `${px}px`);
  }
  /** Sets `marginRight: "0px"`. */
  get mr0() {
    return this.add("marginRight", "0px");
  }
  /** Sets `marginRight: "8px"`. */
  get mr1() {
    return this.add("marginRight", "8px");
  }
  /** Sets `marginRight: "16px"`. */
  get mr2() {
    return this.add("marginRight", "16px");
  }
  /** Sets `marginRight: "24px"`. */
  get mr3() {
    return this.add("marginRight", "24px");
  }
  /** Sets `marginRight: "32px"`. */
  get mr4() {
    return this.add("marginRight", "32px");
  }
  /** Sets `marginRight: "auto"`. */
  get mra() {
    return this.add("marginRight", "auto");
  }
  /** Sets `marginRight: "v"`. */
  mr(v: number | string) {
    return this.add("marginRight", maybeInc(v));
  }
  /** Sets `marginRight: px`. */
  mrPx(px: number) {
    return this.add("marginRight", `${px}px`);
  }
  /** Sets `marginBottom: "0px"`. */
  get mb0() {
    return this.add("marginBottom", "0px");
  }
  /** Sets `marginBottom: "8px"`. */
  get mb1() {
    return this.add("marginBottom", "8px");
  }
  /** Sets `marginBottom: "16px"`. */
  get mb2() {
    return this.add("marginBottom", "16px");
  }
  /** Sets `marginBottom: "24px"`. */
  get mb3() {
    return this.add("marginBottom", "24px");
  }
  /** Sets `marginBottom: "32px"`. */
  get mb4() {
    return this.add("marginBottom", "32px");
  }
  /** Sets `marginBottom: "auto"`. */
  get mba() {
    return this.add("marginBottom", "auto");
  }
  /** Sets `marginBottom: "v"`. */
  mb(v: number | string) {
    return this.add("marginBottom", maybeInc(v));
  }
  /** Sets `marginBottom: px`. */
  mbPx(px: number) {
    return this.add("marginBottom", `${px}px`);
  }
  /** Sets `marginLeft: "0px"`. */
  get ml0() {
    return this.add("marginLeft", "0px");
  }
  /** Sets `marginLeft: "8px"`. */
  get ml1() {
    return this.add("marginLeft", "8px");
  }
  /** Sets `marginLeft: "16px"`. */
  get ml2() {
    return this.add("marginLeft", "16px");
  }
  /** Sets `marginLeft: "24px"`. */
  get ml3() {
    return this.add("marginLeft", "24px");
  }
  /** Sets `marginLeft: "32px"`. */
  get ml4() {
    return this.add("marginLeft", "32px");
  }
  /** Sets `marginLeft: "auto"`. */
  get mla() {
    return this.add("marginLeft", "auto");
  }
  /** Sets `marginLeft: "v"`. */
  ml(v: number | string) {
    return this.add("marginLeft", maybeInc(v));
  }
  /** Sets `marginLeft: px`. */
  mlPx(px: number) {
    return this.add("marginLeft", `${px}px`);
  }
  /** Sets `marginLeft: "0px"; marginRight: "0px"`. */
  get mx0() {
    return this.add("marginLeft", "0px").add("marginRight", "0px");
  }
  /** Sets `marginLeft: "8px"; marginRight: "8px"`. */
  get mx1() {
    return this.add("marginLeft", "8px").add("marginRight", "8px");
  }
  /** Sets `marginLeft: "16px"; marginRight: "16px"`. */
  get mx2() {
    return this.add("marginLeft", "16px").add("marginRight", "16px");
  }
  /** Sets `marginLeft: "24px"; marginRight: "24px"`. */
  get mx3() {
    return this.add("marginLeft", "24px").add("marginRight", "24px");
  }
  /** Sets `marginLeft: "32px"; marginRight: "32px"`. */
  get mx4() {
    return this.add("marginLeft", "32px").add("marginRight", "32px");
  }
  /** Sets `marginLeft: "auto"; marginRight: "auto"`. */
  get mxa() {
    return this.add("marginLeft", "auto").add("marginRight", "auto");
  }
  /** Sets `marginLeft: "v"; marginRight: "v"`. */
  mx(v: number | string) {
    return this.add("marginLeft", maybeInc(v)).add("marginRight", maybeInc(v));
  }
  /** Sets `marginLeft: px; marginRight: px`. */
  mxPx(px: number) {
    return this.add("marginLeft", `${px}px`).add("marginRight", `${px}px`);
  }
  /** Sets `marginTop: "0px"; marginBottom: "0px"`. */
  get my0() {
    return this.add("marginTop", "0px").add("marginBottom", "0px");
  }
  /** Sets `marginTop: "8px"; marginBottom: "8px"`. */
  get my1() {
    return this.add("marginTop", "8px").add("marginBottom", "8px");
  }
  /** Sets `marginTop: "16px"; marginBottom: "16px"`. */
  get my2() {
    return this.add("marginTop", "16px").add("marginBottom", "16px");
  }
  /** Sets `marginTop: "24px"; marginBottom: "24px"`. */
  get my3() {
    return this.add("marginTop", "24px").add("marginBottom", "24px");
  }
  /** Sets `marginTop: "32px"; marginBottom: "32px"`. */
  get my4() {
    return this.add("marginTop", "32px").add("marginBottom", "32px");
  }
  /** Sets `marginTop: "auto"; marginBottom: "auto"`. */
  get mya() {
    return this.add("marginTop", "auto").add("marginBottom", "auto");
  }
  /** Sets `marginTop: "v"; marginBottom: "v"`. */
  my(v: number | string) {
    return this.add("marginTop", maybeInc(v)).add("marginBottom", maybeInc(v));
  }
  /** Sets `marginTop: px; marginBottom: px`. */
  myPx(px: number) {
    return this.add("marginTop", `${px}px`).add("marginBottom", `${px}px`);
  }
  /** Sets `marginTop: "0px"; marginBottom: "0px"; marginRight: "0px"; marginLeft: "0px"`. */
  get m0() {
    return this.add("marginTop", "0px").add("marginBottom", "0px").add("marginRight", "0px").add("marginLeft", "0px");
  }
  /** Sets `marginTop: "8px"; marginBottom: "8px"; marginRight: "8px"; marginLeft: "8px"`. */
  get m1() {
    return this.add("marginTop", "8px").add("marginBottom", "8px").add("marginRight", "8px").add("marginLeft", "8px");
  }
  /** Sets `marginTop: "16px"; marginBottom: "16px"; marginRight: "16px"; marginLeft: "16px"`. */
  get m2() {
    return this.add("marginTop", "16px").add("marginBottom", "16px").add("marginRight", "16px").add(
      "marginLeft",
      "16px",
    );
  }
  /** Sets `marginTop: "24px"; marginBottom: "24px"; marginRight: "24px"; marginLeft: "24px"`. */
  get m3() {
    return this.add("marginTop", "24px").add("marginBottom", "24px").add("marginRight", "24px").add(
      "marginLeft",
      "24px",
    );
  }
  /** Sets `marginTop: "32px"; marginBottom: "32px"; marginRight: "32px"; marginLeft: "32px"`. */
  get m4() {
    return this.add("marginTop", "32px").add("marginBottom", "32px").add("marginRight", "32px").add(
      "marginLeft",
      "32px",
    );
  }
  /** Sets `marginTop: "auto"; marginBottom: "auto"; marginRight: "auto"; marginLeft: "auto"`. */
  get ma() {
    return this.add("marginTop", "auto").add("marginBottom", "auto").add("marginRight", "auto").add(
      "marginLeft",
      "auto",
    );
  }
  /** Sets `marginTop: "v"; marginBottom: "v"; marginRight: "v"; marginLeft: "v"`. */
  m(v: number | string) {
    return this.add("marginTop", maybeInc(v)).add("marginBottom", maybeInc(v)).add("marginRight", maybeInc(v)).add(
      "marginLeft",
      maybeInc(v),
    );
  }
  /** Sets `marginTop: px; marginBottom: px; marginRight: px; marginLeft: px`. */
  mPx(px: number) {
    return this.add("marginTop", `${px}px`).add("marginBottom", `${px}px`).add("marginRight", `${px}px`).add(
      "marginLeft",
      `${px}px`,
    );
  }
  /** Sets `paddingTop: "0px"`. */
  get pt0() {
    return this.add("paddingTop", "0px");
  }
  /** Sets `paddingTop: "8px"`. */
  get pt1() {
    return this.add("paddingTop", "8px");
  }
  /** Sets `paddingTop: "16px"`. */
  get pt2() {
    return this.add("paddingTop", "16px");
  }
  /** Sets `paddingTop: "24px"`. */
  get pt3() {
    return this.add("paddingTop", "24px");
  }
  /** Sets `paddingTop: "32px"`. */
  get pt4() {
    return this.add("paddingTop", "32px");
  }
  /** Sets `paddingTop: "v"`. */
  pt(v: number | string) {
    return this.add("paddingTop", maybeInc(v));
  }
  /** Sets `paddingTop: px`. */
  ptPx(px: number) {
    return this.add("paddingTop", `${px}px`);
  }
  /** Sets `paddingRight: "0px"`. */
  get pr0() {
    return this.add("paddingRight", "0px");
  }
  /** Sets `paddingRight: "8px"`. */
  get pr1() {
    return this.add("paddingRight", "8px");
  }
  /** Sets `paddingRight: "16px"`. */
  get pr2() {
    return this.add("paddingRight", "16px");
  }
  /** Sets `paddingRight: "24px"`. */
  get pr3() {
    return this.add("paddingRight", "24px");
  }
  /** Sets `paddingRight: "32px"`. */
  get pr4() {
    return this.add("paddingRight", "32px");
  }
  /** Sets `paddingRight: "v"`. */
  pr(v: number | string) {
    return this.add("paddingRight", maybeInc(v));
  }
  /** Sets `paddingRight: px`. */
  prPx(px: number) {
    return this.add("paddingRight", `${px}px`);
  }
  /** Sets `paddingBottom: "0px"`. */
  get pb0() {
    return this.add("paddingBottom", "0px");
  }
  /** Sets `paddingBottom: "8px"`. */
  get pb1() {
    return this.add("paddingBottom", "8px");
  }
  /** Sets `paddingBottom: "16px"`. */
  get pb2() {
    return this.add("paddingBottom", "16px");
  }
  /** Sets `paddingBottom: "24px"`. */
  get pb3() {
    return this.add("paddingBottom", "24px");
  }
  /** Sets `paddingBottom: "32px"`. */
  get pb4() {
    return this.add("paddingBottom", "32px");
  }
  /** Sets `paddingBottom: "v"`. */
  pb(v: number | string) {
    return this.add("paddingBottom", maybeInc(v));
  }
  /** Sets `paddingBottom: px`. */
  pbPx(px: number) {
    return this.add("paddingBottom", `${px}px`);
  }
  /** Sets `paddingLeft: "0px"`. */
  get pl0() {
    return this.add("paddingLeft", "0px");
  }
  /** Sets `paddingLeft: "8px"`. */
  get pl1() {
    return this.add("paddingLeft", "8px");
  }
  /** Sets `paddingLeft: "16px"`. */
  get pl2() {
    return this.add("paddingLeft", "16px");
  }
  /** Sets `paddingLeft: "24px"`. */
  get pl3() {
    return this.add("paddingLeft", "24px");
  }
  /** Sets `paddingLeft: "32px"`. */
  get pl4() {
    return this.add("paddingLeft", "32px");
  }
  /** Sets `paddingLeft: "v"`. */
  pl(v: number | string) {
    return this.add("paddingLeft", maybeInc(v));
  }
  /** Sets `paddingLeft: px`. */
  plPx(px: number) {
    return this.add("paddingLeft", `${px}px`);
  }
  /** Sets `paddingLeft: "0px"; paddingRight: "0px"`. */
  get px0() {
    return this.add("paddingLeft", "0px").add("paddingRight", "0px");
  }
  /** Sets `paddingLeft: "8px"; paddingRight: "8px"`. */
  get px1() {
    return this.add("paddingLeft", "8px").add("paddingRight", "8px");
  }
  /** Sets `paddingLeft: "16px"; paddingRight: "16px"`. */
  get px2() {
    return this.add("paddingLeft", "16px").add("paddingRight", "16px");
  }
  /** Sets `paddingLeft: "24px"; paddingRight: "24px"`. */
  get px3() {
    return this.add("paddingLeft", "24px").add("paddingRight", "24px");
  }
  /** Sets `paddingLeft: "32px"; paddingRight: "32px"`. */
  get px4() {
    return this.add("paddingLeft", "32px").add("paddingRight", "32px");
  }
  /** Sets `paddingLeft: "v"; paddingRight: "v"`. */
  px(v: number | string) {
    return this.add("paddingLeft", maybeInc(v)).add("paddingRight", maybeInc(v));
  }
  /** Sets `paddingLeft: px; paddingRight: px`. */
  pxPx(px: number) {
    return this.add("paddingLeft", `${px}px`).add("paddingRight", `${px}px`);
  }
  /** Sets `paddingTop: "0px"; paddingBottom: "0px"`. */
  get py0() {
    return this.add("paddingTop", "0px").add("paddingBottom", "0px");
  }
  /** Sets `paddingTop: "8px"; paddingBottom: "8px"`. */
  get py1() {
    return this.add("paddingTop", "8px").add("paddingBottom", "8px");
  }
  /** Sets `paddingTop: "16px"; paddingBottom: "16px"`. */
  get py2() {
    return this.add("paddingTop", "16px").add("paddingBottom", "16px");
  }
  /** Sets `paddingTop: "24px"; paddingBottom: "24px"`. */
  get py3() {
    return this.add("paddingTop", "24px").add("paddingBottom", "24px");
  }
  /** Sets `paddingTop: "32px"; paddingBottom: "32px"`. */
  get py4() {
    return this.add("paddingTop", "32px").add("paddingBottom", "32px");
  }
  /** Sets `paddingTop: "v"; paddingBottom: "v"`. */
  py(v: number | string) {
    return this.add("paddingTop", maybeInc(v)).add("paddingBottom", maybeInc(v));
  }
  /** Sets `paddingTop: px; paddingBottom: px`. */
  pyPx(px: number) {
    return this.add("paddingTop", `${px}px`).add("paddingBottom", `${px}px`);
  }
  /** Sets `paddingTop: "0px"; paddingBottom: "0px"; paddingRight: "0px"; paddingLeft: "0px"`. */
  get p0() {
    return this.add("paddingTop", "0px").add("paddingBottom", "0px").add("paddingRight", "0px").add(
      "paddingLeft",
      "0px",
    );
  }
  /** Sets `paddingTop: "8px"; paddingBottom: "8px"; paddingRight: "8px"; paddingLeft: "8px"`. */
  get p1() {
    return this.add("paddingTop", "8px").add("paddingBottom", "8px").add("paddingRight", "8px").add(
      "paddingLeft",
      "8px",
    );
  }
  /** Sets `paddingTop: "16px"; paddingBottom: "16px"; paddingRight: "16px"; paddingLeft: "16px"`. */
  get p2() {
    return this.add("paddingTop", "16px").add("paddingBottom", "16px").add("paddingRight", "16px").add(
      "paddingLeft",
      "16px",
    );
  }
  /** Sets `paddingTop: "24px"; paddingBottom: "24px"; paddingRight: "24px"; paddingLeft: "24px"`. */
  get p3() {
    return this.add("paddingTop", "24px").add("paddingBottom", "24px").add("paddingRight", "24px").add(
      "paddingLeft",
      "24px",
    );
  }
  /** Sets `paddingTop: "32px"; paddingBottom: "32px"; paddingRight: "32px"; paddingLeft: "32px"`. */
  get p4() {
    return this.add("paddingTop", "32px").add("paddingBottom", "32px").add("paddingRight", "32px").add(
      "paddingLeft",
      "32px",
    );
  }
  /** Sets `paddingTop: "v"; paddingBottom: "v"; paddingRight: "v"; paddingLeft: "v"`. */
  p(v: number | string) {
    return this.add("paddingTop", maybeInc(v)).add("paddingBottom", maybeInc(v)).add("paddingRight", maybeInc(v)).add(
      "paddingLeft",
      maybeInc(v),
    );
  }
  /** Sets `paddingTop: px; paddingBottom: px; paddingRight: px; paddingLeft: px`. */
  pPx(px: number) {
    return this.add("paddingTop", `${px}px`).add("paddingBottom", `${px}px`).add("paddingRight", `${px}px`).add(
      "paddingLeft",
      `${px}px`,
    );
  }

  // textAlign
  /** Sets `textAlign: "left"`. */
  get tl() {
    return this.add("textAlign", "left");
  }
  /** Sets `textAlign: "center"`. */
  get tc() {
    return this.add("textAlign", "center");
  }
  /** Sets `textAlign: "right"`. */
  get tr() {
    return this.add("textAlign", "right");
  }
  /** Sets `textAlign: "justify"`. */
  get tj() {
    return this.add("textAlign", "justify");
  }
  /** Sets `textAlign: value`. */
  ta(value: Properties["textAlign"]) {
    return this.add("textAlign", value);
  }

  // textDecoration
  /** Sets `textDecoration: "none"`. */
  get noUnderline() {
    return this.add("textDecoration", "none");
  }
  /** Sets `textDecoration: "line-through"`. */
  get strike() {
    return this.add("textDecoration", "line-through");
  }
  /** Sets `textDecoration: "underline"`. */
  get underline() {
    return this.add("textDecoration", "underline");
  }
  /** Sets `textDecoration: value`. */
  textDecoration(value: Properties["textDecoration"]) {
    return this.add("textDecoration", value);
  }

  // textTransform
  /** Sets `textTransform: "capitalize"`. */
  get ttc() {
    return this.add("textTransform", "capitalize");
  }
  /** Sets `textTransform: "lowercase"`. */
  get ttl() {
    return this.add("textTransform", "lowercase");
  }
  /** Sets `textTransform: "uppercase"`. */
  get ttu() {
    return this.add("textTransform", "uppercase");
  }
  /** Sets `textTransform: "none"`. */
  get ttn() {
    return this.add("textTransform", "none");
  }
  /** Sets `textTransform: value`. */
  tt(value: Properties["textTransform"]) {
    return this.add("textTransform", value);
  }

  // typeScale
  /** Sets `fontSize: "24px"`. */
  get f24() {
    return this.add("fontSize", "24px");
  }
  /** Sets `fontSize: "18px"`. */
  get f18() {
    return this.add("fontSize", "18px");
  }
  /** Sets `fontSize: "16px"`. */
  get f16() {
    return this.add("fontSize", "16px");
  }
  /** Sets `fontSize: "14px"`. */
  get f14() {
    return this.add("fontSize", "14px");
  }
  /** Sets `fontSize: "12px"`. */
  get f12() {
    return this.add("fontSize", "12px");
  }
  /** Sets `fontSize: "10px"; fontWeight: 500`. */
  get f10() {
    return this.add("fontSize", "10px").add("fontWeight", 500);
  }

  // typography
  /** Sets `maxWidth: "30em"`. */
  get measure() {
    return this.add("maxWidth", "30em");
  }
  /** Sets `maxWidth: "34em"`. */
  get measureWide() {
    return this.add("maxWidth", "34em");
  }
  /** Sets `maxWidth: "20em"`. */
  get measureNarrow() {
    return this.add("maxWidth", "20em");
  }
  /** Sets `textIndent: "1em"; marginTop: 0; marginBottom: 0`. */
  get indent() {
    return this.add("textIndent", "1em").add("marginTop", 0).add("marginBottom", 0);
  }
  /** Sets `fontVariant: "small-caps"`. */
  get smallCaps() {
    return this.add("fontVariant", "small-caps");
  }
  /** Sets `whiteSpace: "nowrap"; overflow: "hidden"; textOverflow: "ellipsis"`. */
  get truncate() {
    return this.add("whiteSpace", "nowrap").add("overflow", "hidden").add("textOverflow", "ellipsis");
  }
  /** Sets `lineHeight: value`. */
  lh(value: Properties["lineHeight"]) {
    return this.add("lineHeight", value);
  }

  // userSelect
  /** Sets `userSelect: "none"`. */
  get selectNone() {
    return this.add("userSelect", "none");
  }
  /** Sets `userSelect: "text"`. */
  get selectText() {
    return this.add("userSelect", "text");
  }
  /** Sets `userSelect: "all"`. */
  get selectAll() {
    return this.add("userSelect", "all");
  }
  /** Sets `userSelect: "auto"`. */
  get selectAuto() {
    return this.add("userSelect", "auto");
  }
  /** Sets `userSelect: value`. */
  select(value: Properties["userSelect"]) {
    return this.add("userSelect", value);
  }

  // verticalAlign
  /** Sets `verticalAlign: "baseline"`. */
  get vBase() {
    return this.add("verticalAlign", "baseline");
  }
  /** Sets `verticalAlign: "middle"`. */
  get vMid() {
    return this.add("verticalAlign", "middle");
  }
  /** Sets `verticalAlign: "top"`. */
  get vTop() {
    return this.add("verticalAlign", "top");
  }
  /** Sets `verticalAlign: "bottom"`. */
  get vBottom() {
    return this.add("verticalAlign", "bottom");
  }
  /** Sets `verticalAlign: value`. */
  va(value: Properties["verticalAlign"]) {
    return this.add("verticalAlign", value);
  }

  // visibility
  /** Sets `visibility: "visible"`. */
  get visible() {
    return this.add("visibility", "visible");
  }
  /** Sets `visibility: "hidden"`. */
  get invisible() {
    return this.add("visibility", "hidden");
  }
  /** Sets `visibility: value`. */
  visibility(value: Properties["visibility"]) {
    return this.add("visibility", value);
  }

  // whitespace
  /** Sets `whiteSpace: "nowrap"`. */
  get nowrap() {
    return this.add("whiteSpace", "nowrap");
  }
  /** Sets `whiteSpace: "pre"`. */
  get pre() {
    return this.add("whiteSpace", "pre");
  }
  /** Sets `whiteSpace: "normal"`. */
  get wsNormal() {
    return this.add("whiteSpace", "normal");
  }
  /** Sets `whiteSpace: "pre"`. */
  get wsp() {
    return this.add("whiteSpace", "pre");
  }
  /** Sets `whiteSpace: "normal"`. */
  get wsn() {
    return this.add("whiteSpace", "normal");
  }
  /** Sets `whiteSpace: "nowrap"`. */
  get wsnw() {
    return this.add("whiteSpace", "nowrap");
  }
  /** Sets `whiteSpace: "break-spaces"`. */
  get wsbs() {
    return this.add("whiteSpace", "break-spaces");
  }
  /** Sets `whiteSpace: "pre-wrap"`. */
  get wspw() {
    return this.add("whiteSpace", "pre-wrap");
  }
  /** Sets `whiteSpace: "pre-line"`. */
  get wspl() {
    return this.add("whiteSpace", "pre-line");
  }
  /** Sets `whiteSpace: value`. */
  whiteSpace(value: Properties["whiteSpace"]) {
    return this.add("whiteSpace", value);
  }

  // width
  /** Sets `width: "25%"`. */
  get w25() {
    return this.add("width", "25%");
  }
  /** Sets `width: "50%"`. */
  get w50() {
    return this.add("width", "50%");
  }
  /** Sets `width: "75%"`. */
  get w75() {
    return this.add("width", "75%");
  }
  /** Sets `width: "100%"`. */
  get w100() {
    return this.add("width", "100%");
  }
  /** Sets `width: "fit-content"`. */
  get wfc() {
    return this.add("width", "fit-content");
  }
  /** Sets `width: "max-content"`. */
  get wmaxc() {
    return this.add("width", "max-content");
  }
  /** Sets `width: "min-content"`. */
  get wminc() {
    return this.add("width", "min-content");
  }
  /** Sets `minWidth: 0`. */
  get mw0() {
    return this.add("minWidth", 0);
  }
  /** Sets `minWidth: "25%"`. */
  get mw25() {
    return this.add("minWidth", "25%");
  }
  /** Sets `minWidth: "50%"`. */
  get mw50() {
    return this.add("minWidth", "50%");
  }
  /** Sets `minWidth: "75%"`. */
  get mw75() {
    return this.add("minWidth", "75%");
  }
  /** Sets `minWidth: "100%"`. */
  get mw100() {
    return this.add("minWidth", "100%");
  }
  /** Sets `minWidth: "fit-content"`. */
  get mwfc() {
    return this.add("minWidth", "fit-content");
  }
  /** Sets `minWidth: "min-content"`. */
  get mwminc() {
    return this.add("minWidth", "min-content");
  }
  /** Sets `minWidth: "max-content"`. */
  get mwmaxc() {
    return this.add("minWidth", "max-content");
  }
  /** Sets `minWidth: value`. */
  mw(value: Properties["minWidth"]) {
    return this.add("minWidth", value);
  }
  /** Sets `minWidth: px`. */
  mwPx(px: number) {
    return this.mw(`${px}px`);
  }
  /** Sets `maxWidth: "0"`. */
  get maxw0() {
    return this.add("maxWidth", "0");
  }
  /** Sets `maxWidth: "25%"`. */
  get maxw25() {
    return this.add("maxWidth", "25%");
  }
  /** Sets `maxWidth: "50%"`. */
  get maxw50() {
    return this.add("maxWidth", "50%");
  }
  /** Sets `maxWidth: "75%"`. */
  get maxw75() {
    return this.add("maxWidth", "75%");
  }
  /** Sets `maxWidth: "100%"`. */
  get maxw100() {
    return this.add("maxWidth", "100%");
  }
  /** Sets `maxWidth: "fit-content"`. */
  get maxwfc() {
    return this.add("maxWidth", "fit-content");
  }
  /** Sets `maxWidth: "min-content"`. */
  get maxwminc() {
    return this.add("maxWidth", "min-content");
  }
  /** Sets `maxWidth: "max-content"`. */
  get maxwmaxc() {
    return this.add("maxWidth", "max-content");
  }
  /** Sets `maxWidth: value`. */
  maxw(value: Properties["maxWidth"]) {
    return this.add("maxWidth", value);
  }
  /** Sets `maxWidth: px`. */
  maxwPx(px: number) {
    return this.maxw(`${px}px`);
  }
  /** Sets `width: "0px"`. */
  get w0() {
    return this.add("width", "0px");
  }
  /** Sets `width: "8px"`. */
  get w1() {
    return this.add("width", "8px");
  }
  /** Sets `width: "16px"`. */
  get w2() {
    return this.add("width", "16px");
  }
  /** Sets `width: "24px"`. */
  get w3() {
    return this.add("width", "24px");
  }
  /** Sets `width: "32px"`. */
  get w4() {
    return this.add("width", "32px");
  }
  /** Sets `width: "auto"`. */
  get wa() {
    return this.add("width", "auto");
  }
  /** Sets `width: "v"`. */
  w(v: number | string) {
    return this.add("width", maybeInc(v));
  }
  /** Sets `width: px`. */
  wPx(px: number) {
    return this.add("width", `${px}px`);
  }

  // wordBreak
  /** Sets `wordBreak: "normal"`. */
  get breakNormal() {
    return this.add("wordBreak", "normal");
  }
  /** Sets `wordBreak: "break-all"`. */
  get breakAll() {
    return this.add("wordBreak", "break-all");
  }
  /** Sets `wordBreak: "keep-all"`. */
  get breakKeepAll() {
    return this.add("wordBreak", "keep-all");
  }
  /** Sets `wordBreak: "break-word"`. */
  get breakWord() {
    return this.add("wordBreak", "break-word");
  }
  /** Sets `wordBreak: value`. */
  wordBreak(value: Properties["wordBreak"]) {
    return this.add("wordBreak", value);
  }

  // zIndex
  /** Sets `zIndex: 0`. */
  get z0() {
    return this.add("zIndex", 0);
  }
  /** Sets `zIndex: 1`. */
  get z1() {
    return this.add("zIndex", 1);
  }
  /** Sets `zIndex: 2`. */
  get z2() {
    return this.add("zIndex", 2);
  }
  /** Sets `zIndex: 3`. */
  get z3() {
    return this.add("zIndex", 3);
  }
  /** Sets `zIndex: 4`. */
  get z4() {
    return this.add("zIndex", 4);
  }
  /** Sets `zIndex: 5`. */
  get z5() {
    return this.add("zIndex", 5);
  }
  /** Sets `zIndex: 999`. */
  get z999() {
    return this.add("zIndex", 999);
  }
  /** Sets `zIndex: 9999`. */
  get z9999() {
    return this.add("zIndex", 9999);
  }
  /** Sets `zIndex: "inherit"`. */
  get zInherit() {
    return this.add("zIndex", "inherit");
  }
  /** Sets `zIndex: "initial"`. */
  get zInitial() {
    return this.add("zIndex", "initial");
  }
  /** Sets `zIndex: "unset"`. */
  get zUnset() {
    return this.add("zIndex", "unset");
  }
  /** Sets `zIndex: value`. */
  z(value: Properties["zIndex"]) {
    return this.add("zIndex", value);
  }

  // customStuff
  /** Sets `color: "#000000"`. */
  get foo() {
    return this.add("color", "#000000");
  }

  // vars
  get darkMode() {
    return this.add("--primary" as any, "#000000");
  }

  // aliases
  get bodyText() {
    return this.f14.black;
  }

  get $(): T {
    return maybeImportant(sortObject(this.rules), this.opts.important);
  }

  if(bp: Breakpoint): CssBuilder<T>;
  if(cond: boolean): CssBuilder<T>;
  if(attr: string, value: boolean | string): CssBuilder<T>;
  if(arg: boolean | Breakpoint | string, value?: boolean | string): CssBuilder<T> {
    if (value !== undefined) {
      return this.newCss({ selector: `[${arg}='${value}']` });
    } else if (typeof arg === "boolean") {
      return this.newCss({ enabled: arg });
    } else {
      return this.newCss({ selector: Breakpoints[arg as Breakpoint] });
    }
  }

  get onHover() {
    return this.newCss({ selector: ":hover" });
  }

  ifContainer(props: ContainerProps) {
    return this.newCss({ selector: Container(props) });
  }

  get ifPrint() {
    return this.newCss({ selector: "@media print" });
  }
  get ifSm() {
    return this.newCss({ selector: "@media screen and (max-width:599px)" });
  }
  get ifMd() {
    return this.newCss({ selector: "@media screen and (min-width:600px) and (max-width:959px)" });
  }
  get ifSmOrMd() {
    return this.newCss({ selector: "@media screen and (max-width:959px)" });
  }
  get ifMdAndUp() {
    return this.newCss({ selector: "@media screen and (min-width:600px)" });
  }
  get ifMdAndDown() {
    return this.newCss({ selector: "@media screen and (max-width:959px)" });
  }
  get ifLg() {
    return this.newCss({ selector: "@media screen and (min-width:960px)" });
  }
  get ifMdOrLg() {
    return this.newCss({ selector: "@media screen and (min-width:600px)" });
  }

  get else() {
    if (this.selector !== undefined) {
      if (this.selector.includes("not")) {
        throw new Error("else was already called");
      } else {
        return this.newCss({ selector: this.selector.replace("@media", "@media not") });
      }
    }
    return this.newCss({ enabled: !this.enabled });
  }

  get important() {
    return this.newCss({ important: true });
  }

  /** Adds new properties, either a specific key/value or a Properties object, to the current css. */
  add<P extends Properties>(props: P): CssBuilder<T & P>;
  add<K extends keyof Properties>(prop: K, value: Properties[K]): CssBuilder<T & { [U in K]: Properties[K] }>;
  add<K extends keyof Properties>(propOrProperties: K | Properties, value?: Properties[K]): CssBuilder<any> {
    if (!this.enabled) {
      return this;
    }
    const newRules = typeof propOrProperties === "string" ? { [propOrProperties]: value } : propOrProperties;
    const rules = this.selector
      ? { ...this.rules, [this.selector]: { ...(this.rules as any)[this.selector], ...newRules } }
      : { ...this.rules, ...newRules };
    return this.newCss({ rules: rules as any });
  }

  /** Adds new properties, either a specific key/value or a Properties object, to a nested selector. */
  addIn<P extends Properties>(selector: string, props: P | undefined): CssBuilder<T & P>;
  addIn<K extends keyof Properties>(
    selector: string,
    prop: K,
    value: Properties[K],
  ): CssBuilder<T & { [U in K]: Properties[K] }>;
  addIn<K extends keyof Properties>(
    selector: string,
    propOrProperties: K | Properties,
    value?: Properties[K],
  ): CssBuilder<any> {
    const newRules = typeof propOrProperties === "string" ? { [propOrProperties]: value } : propOrProperties;
    if (!this.enabled) {
      return this;
    }
    if (newRules === undefined) {
      return this;
    }
    const rules = { ...this.rules, [selector]: { ...(this.rules as any)[selector], ...newRules } };
    return this.newCss({ rules: rules as any });
  }
}

/** Emotion treats the same rules, ordered differently as different classes, but naively they can be the same. */
function sortObject<T extends object>(obj: T): T {
  return Object.keys(obj).sort().reduce((acc, key) => {
    acc[key as keyof T] = obj[key as keyof T];
    return acc;
  }, ({} as any) as T) as T;
}

/** Conditionally adds `important!` to everything. */
function maybeImportant<T extends object>(obj: T, important: boolean): T {
  if (important) {
    Object.keys(obj).forEach((key) => {
      (obj as any)[key] = `${(obj as any)[key]} !important`;
    });
  }
  return obj;
}

/** Converts `inc` into pixels value with a `px` suffix. */
export function maybeInc(inc: number | string): string {
  return typeof inc === "string" ? inc : `${increment(inc)}px`;
}

/** Converts `inc` into pixels. */
export function increment(inc: number): number {
  return inc * 8;
}

/** Convert `pixels` to a `px` units string so it's not ambiguous. */
export function px(pixels: number): string {
  return `${pixels}px`;
}

export enum Palette {
  Black = "#353535",
  MidGray = "#888888",
  LightGray = "#cecece",
  White = "#fcfcfa",
  Blue = "#526675",
  Primary = "var(--primary)",
}

/** A shortcut for defining Xss types. */
export type Xss<P extends keyof Properties> = Pick<Properties, P>;

/** An entry point for Css expressions. CssBuilder is immutable so this is safe to share. */
export const Css = new CssBuilder({ rules: {}, enabled: true, important: false, selector: undefined });

export type Margin = "margin" | "marginTop" | "marginRight" | "marginBottom" | "marginLeft";

export type Padding = "padding" | "paddingTop" | "paddingRight" | "paddingBottom" | "paddingLeft";

export type Breakpoint = "print" | "sm" | "md" | "smOrMd" | "mdAndUp" | "mdAndDown" | "lg" | "mdOrLg";
export enum Breakpoints {
  print = "@media print",
  sm = "@media screen and (max-width:599px)",
  md = "@media screen and (min-width:600px) and (max-width:959px)",
  smOrMd = "@media screen and (max-width:959px)",
  mdAndUp = "@media screen and (min-width:600px)",
  mdAndDown = "@media screen and (max-width:959px)",
  lg = "@media screen and (min-width:960px)",
  mdOrLg = "@media screen and (min-width:600px)",
}

/**
 * Utility to help write `@container` queries
 *
 * @param name - The name of the container.
 * @param lt - The maximum width of the container inclusive.
 * @param gt - The minimum width of the container exclusive.
 */
type ContainerProps = { name?: string } & ({ lt: number } | { gt: number } | { lt: number; gt: number });
export function Container(props: ContainerProps) {
  const { name = "" } = props;
  const lt = "lt" in props ? props.lt : undefined;
  const gt = "gt" in props ? props.gt : undefined;

  const ltQuery = lt !== undefined ? `(max-width: ${lt}px)` : "";
  const gtQuery = gt !== undefined ? `(min-width: ${gt + 1}px)` : "";
  const query = [ltQuery, gtQuery].filter(Boolean).join(" and ");

  return `@container ${name} ${query}`;
}

export type CustomType = number;
